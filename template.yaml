AWSTemplateFormatVersion: 2010-09-09
Transform:
- AWS::Serverless-2016-10-31

Parameters:
  CompanyName:
    Type: String
  SenderEmail:
    Type: String
  UserPoolId:
    Type: String
  StripeSecretKey:
    Type: String
  StripePublishableKey:
    Type: String
  ClientId:
    Type: String
  Environment:
    Type: String
  ProjectName:
    Type: String
  ProjectId:
    Type: String

Globals:
  Function:
    Environment:
      Variables:
        PAYMENT_REQUESTS_TABLE_NAME: !Ref PaymentRequestsTable
        COMPANY_NAME: !Ref 'CompanyName'
        SENDER_EMAIL: !Ref 'SenderEmail'
        CLIENT_ID: !Ref 'CognitoUserPoolClient'
        USER_POOL_ID: !Ref 'CognitoUserPool'
        STRIPE_SECRET_KEY : !Ref 'StripeSecretKey'
        STRIPE_PUBLISHABLE_KEY : !Ref 'StripePublishableKey'
        STAGE_NAME : !Ref 'Environment'
        BASE_URL: http://example.com
        REGION: us-east-1
        ASSETS_HOST: !Join ['/', ['https://s3.amazonaws.com',!Ref 'S3AssetsBucket' ] ]

Resources:

  S3AssetsBucket:
    Type: AWS::S3::Bucket
    Properties:
      AccessControl: PublicRead
      BucketName: !Sub ${Environment}.assets.${ProjectName}

  PaymentRequestsTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Join ['-', [!Ref 'ProjectName', !Ref 'Environment']]
      AttributeDefinitions:
      - AttributeName: id
        AttributeType: S
      - AttributeName: created_at
        AttributeType: S
      KeySchema:
      - AttributeName: id
        KeyType: HASH
      - AttributeName: created_at
        KeyType: RANGE
      ProvisionedThroughput:
        ReadCapacityUnits: 5
        WriteCapacityUnits: 5

  CognitoUserPool:
    Type: "AWS::Cognito::UserPool"
    Properties:
      UserPoolName: PaymentDriver
  CognitoUserPoolClient:
    Type: "AWS::Cognito::UserPoolClient"
    Properties:
        ClientName: PaymentDriver
        GenerateSecret: false
        UserPoolId: !Ref CognitoUserPool
  CognitoIdPool:
    Type: "AWS::Cognito::IdentityPool"
    Properties:
      IdentityPoolName: PaymentDriver
      CognitoIdentityProviders:
        -
          ClientId: !Ref CognitoUserPoolClient
          ProviderName: !GetAtt CognitoUserPool.ProviderName
      AllowUnauthenticatedIdentities: false

  PaymentDriverRole:
    Properties:
      AssumeRolePolicyDocument:
        Statement:
        - Action:
          - sts:AssumeRole
        Effect: Allow
        Principal:
          Service:
          - lambda.amazonaws.com
        Version: '2012-10-17'
      ManagedPolicyArns:
      - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
    Type: AWS::IAM::Role

  Home:
    Type: AWS::Serverless::Function
    Role: !GetAtt PaymentDriverRole.Arn
    Properties:
      Handler: home.index
      Runtime: nodejs8.10
      Timeout: 10
      Policies: AmazonDynamoDBFullAccess
      Events:
        GetEvent:
          Type: Api
          Properties:
            Path: /
            Method: get

  Login:
    Type: AWS::Serverless::Function
    Role: !GetAtt PaymentDriverRole.Arn
    Properties:
      Handler: home.login
      Runtime: nodejs8.10
      Policies: AmazonDynamoDBFullAccess
      Events:
        GetEvent:
          Type: Api
          Properties:
            Path: /login
            Method: post

  Logout:
    Type: AWS::Serverless::Function
    Role: !GetAtt PaymentDriverRole.Arn
    Properties:
      Handler: home.logout
      Runtime: nodejs8.10
      Policies: AmazonDynamoDBFullAccess
      Events:
        GetEvent:
          Type: Api
          Properties:
            Path: /logout
            Method: get

  PaymentRequests:
    Type: AWS::Serverless::Function
    Role: !GetAtt PaymentDriverRole.Arn
    Properties:
      Handler: payment-requests.index
      Runtime: nodejs8.10
      Policies: AmazonDynamoDBFullAccess
      Events:
        GetEvent:
          Type: Api
          Properties:
            Path: /payment-requests
            Method: get

  PaymentRequestsNew:
    Type: AWS::Serverless::Function
    Role: !GetAtt PaymentDriverRole.Arn
    Properties:
      Handler: payment-requests.new
      Runtime: nodejs8.10
      Policies: AmazonDynamoDBFullAccess
      Events:
        GetEvent:
          Type: Api
          Properties:
            Path: /payment-requests-new
            Method: get

  PostPaymentRequest:
    Type: AWS::Serverless::Function
    Role: !GetAtt PaymentDriverRole.Arn
    Properties:
      Handler: payment-requests.post
      Runtime: nodejs8.10
      Policies: AmazonDynamoDBFullAccess
      Events:
        GetEvent:
          Type: Api
          Properties:
            Path: /payment-requests
            Method: post

  ResendPaymentRequest:
    Type: AWS::Serverless::Function
    Role: !GetAtt PaymentDriverRole.Arn
    Properties:
      Handler: payment-requests.resend
      Runtime: nodejs8.10
      Policies: AmazonDynamoDBFullAccess
      Events:
        GetEvent:
          Type: Api
          Properties:
            Path: /payment-requests-resend
            Method: get

  PaymentForm:
    Type: AWS::Serverless::Function
    Role: !GetAtt PaymentDriverRole.Arn
    Properties:
      Handler: payments.get
      Runtime: nodejs8.10
      Policies: AmazonDynamoDBFullAccess
      Events:
        GetEvent:
          Type: Api
          Properties:
            Path: /payments
            Method: get

  ProcessPayment:
    Type: AWS::Serverless::Function
    Role: !GetAtt PaymentDriverRole.Arn
    Properties:
      Handler: payments.post
      Runtime: nodejs8.10
      Policies: AmazonDynamoDBFullAccess
      Events:
        GetEvent:
          Type: Api
          Properties:
            Path: /payments
            Method: post

Outputs:
  AssetsUrl:
    Value: !GetAtt S3AssetsBucket.WebsiteURL
    Description: URL for the S3 bucket.
  AssetsLogicAddress:
    Value: !Ref S3AssetsBucket
    Description: URL for the S3 bucket.
